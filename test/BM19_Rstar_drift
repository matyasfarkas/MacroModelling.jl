#using Pkg
#Pkg.add(["JuMP", "Ipopt", "Turing", "StatsPlots", "Random","Statistics","LinearAlgebra","HypothesisTests","Distributions","ChainRulesCore","ForwardDiff"])

using MacroModelling, JuMP, Ipopt
import Turing, StatsPlots, Random, Statistics
import LinearAlgebra as ‚Ñí
using HypothesisTests, Distributions
import ChainRulesCore: @ignore_derivatives, ignore_derivatives
import ForwardDiff as ‚Ñ±

@model AS07 begin
	c[0] ^ (-TAU) = r[0] * 1 / (1 + RA / 400) * c[1] ^ (-TAU) / p[1] / ((1 + GAMQ / 100) * z[1])

	1 = p[0] * PHI * (p[0] - p[ss]) + 1 / NU * (1 - (c[0] ^ (-TAU)) ^ (-1)) - PHI / (2 * NU) * (p[0] - p[ss]) ^ 2 + 1 / (1 + RA / 400) * PHI * p[1] * (p[1] - p[ss]) * y[1] * c[1] ^ (-TAU) / c[0] ^ (-TAU) / y[0]

	y[0] = c[0] + y[0] * (1 - 1 / g[0]) + y[0] * PHI / 2 * (p[0] - p[ss]) ^ 2

	r[0] = exp(SIGR / 100 * epsr[x]) * r[-1] ^ RHOR * (r[ss] * (p[0] / (1 + PA / 400)) ^ PSIP * (y[0] / ((1 - NU) ^ (1 / TAU) * g[0])) ^ PSIY) ^ (1 - RHOR) * exp(SIGFG / 100 * epsfg[0]) 

	log(g[0]) = SIGG / 100 * epsg[x] + RHOG * log(g[-1]) + (1 - RHOG) * ( - log(C_o_Y))

	log(z[0]) = XI * RHOZ * log(z[-1]) + SIGZ / 100 * epsz[x]

    U[0] = ustar[0] +  Uy0 * y[0] + Uy1 * y[-1] + Uy2 * y[-2] + SIGu/100 *epsu[x]

    ustar[0]=ustart[-1]+ SIGustar / 100 *epsustar[x]

	YGR[0] = GAMQ + 100 * (log(y[0] / y[ss]) - log(y[-1] / y[ss]) + log(z[0] / z[ss]))

	INFL[0] = PA + 400 * log(p[0] / p[ss])

	INT[0] = RA + PA + GAMQ * 4 + 400 * log(r[0] / r[ss])

    epsfg[0] = epsf1[-1]

    epsf1[0] = epsf2[-1] + epsf1x[x] 
    
    epsf2[0] = epsf3[-1] + epsf2x[x] 

    epsf3[0] = epsf4[-1] + epsf3x[x] 

    epsf4[0] = epsf5[-1] + epsf4x[x] 

    epsf5[0] = epsf6[-1] + epsf5x[x] 

    epsf6[0] = epsf7[-1] + epsf6x[x] 

    epsf7[0] = epsf8[-1] + epsf7x[x] 

    epsf8[0] = epsf9[-1]  + epsf8x[x] 
    
    epsf9[0] = epsf10[-1]  + epsf9x[x] 

    epsf10[0] = epsf11[-1]  + epsf10x[x] 

    epsf11[0] = epsf12[-1]  + epsf11x[x] 

    epsf12[0] = epsf13[-1]  + epsf12x[x] 

    epsf13[0] = epsf14[-1]  + epsf13x[x] 

    epsf14[0] = epsf15[-1]  + epsf14x[x] 

    epsf15[0] = epsf16[-1]  + epsf15x[x] 

    epsf16[0] = epsf16x[x] 


end


@parameters AS07 begin
	RA = 1

	PA = 3.2

	GAMQ =  0 #0.55

	TAU = 2

	NU = 0.1

	KAPPA   = 0.33

	PHI = TAU*(1-NU)/NU/KAPPA/exp(PA/400)^2

	PSIP = 1.5

	PSIY = 0.125

	RHOR = 0.75

	RHOG = 0.95

	RHOZ = 0.9

	SIGR = 0.2

	SIGG = 0.6

	SIGZ = 0.3

	C_o_Y = 0.85

	OMEGA = 0

	XI = 1

    SIGFG = 0.1

end


# draw shocks
Random.seed!(1)
periods = 20
shockdistR = Distributions.SkewNormal(0,1,2) #  Turing.Beta(10,1) #
shockdistother = Distributions.Normal(0,1)

shocksSK = rand(shockdistR,1,periods) #  shocks = randn(1,periods)
shocks = rand(shockdistother,2,periods) #  shocks = randn(1,periods)
shockstrue = [ zeros(16, periods); shocks[1,:]' ; -shocksSK; shocks[2,:]' ]

#shockstrue[9:11,:] =  shockstrue[9:11,:] ./ Statistics.std(shockstrue[9:11,:],dims = 2)  # antithetic shocks
shockstrue =shockstrue .- Statistics.mean(shockstrue,dims=2) # antithetic shocks

#shocks /= Statistics.std(shocks)  # antithetic shocks
#shocks .-= Statistics.mean(shocks) # antithetic shocks
# Test for non-normality
        HypothesisTests.ExactOneSampleKSTest(vec(shocksSK),Turing.Normal(0,1))
        StatsPlots.plot(Distributions.Normal(0,1), fill=(0, .5,:blue))
        StatsPlots.density!(shocksSK')
        StatsPlots.density!(shockstrue[10,:])
# get simulation
# simulated_data = get_irf(AS07,shocks = shockstrue, periods = 0, levels = true) #[1:3,:,:] |>collect #([:YGR ],:,:) |>collect

RA = 1

PA = 3.2

GAMQ = 0 #0.55

TAU = 2

NU = 0.1

KAPPA   = 0.33

PHI = TAU*(1-NU)/NU/KAPPA/exp(PA/400)^2

PSIP = 1.5

PSIY = 0.125

RHOR = 0.75

RHOG = 0.95

RHOZ = 0.9

SIGR = 0.2

SIGG = 0.6

SIGZ = 0.3

C_o_Y = 0.85

OMEGA = 0

XI = 1

SIGFG = 0.1
parameters = [RA, PA, GAMQ, TAU, NU, KAPPA, PSIP, PSIY, RHOR, RHOG, RHOZ, SIGR, SIGG, SIGZ, C_o_Y, OMEGA, XI, SIGFG]
m = AS07
solution = get_solution(m, parameters, algorithm = :first_order)

# x0 = randn(m.timings.nPast_not_future_and_mixed) # Initial conditions # ~ Turing.filldist(Turing.Normal(), m.timings.nPast_not_future_and_mixed) # Initial conditions 
x0 = zeros(m.timings.nPast_not_future_and_mixed,1) # Initial conditions # ~ Turing.filldist(Turing.Normal(), m.timings.nPast_not_future_and_mixed) # Initial conditions 
calculate_covariance_ = MacroModelling.calculate_covariance_AD(solution[2], T = m.timings, subset_indices = collect(m.timings.past_not_future_and_mixed_idx) ) # subset_indices = collect(1:m.timings.nVars))
long_run_covariance = calculate_covariance_(solution[2])
initial_conditions = long_run_covariance * x0

ùêí‚ÇÅ = hcat(solution[2][:,1:m.timings.nPast_not_future_and_mixed], zeros(m.timings.nVars), solution[2][:,m.timings.nPast_not_future_and_mixed+1:end])
shockstrue[end-2:end, 1] = zeros(1,3)
œµ = shockstrue

state = zeros(typeof(initial_conditions[1]), m.timings.nVars, periods)
aug_state = [initial_conditions
             1 
             œµ[:,1]]
state[:,1] .=  ùêí‚ÇÅ * aug_state#+ solution[3] * ‚Ñí.kron(aug_state_unc, aug_state_unc) / 2 

zlbvar = [:INT]
zlbindex = sort(indexin(zlbvar, m.timings.var))
zlblevel = 0#-(RA + PA + GAMQ * 4)
mpsh = [:epsr]

fgshlist = [:epsf1x, :epsf2x, :epsf3x, :epsf4x, :epsf5x, :epsf6x, :epsf7x,:epsf8x ,:epsf9x, :epsf10x,:epsf11x,:epsf12x, :epsf13x, :epsf14x, :epsf15x, :epsf16x ]
fgstatelist = [:epsf1, :epsf2, :epsf3, :epsf4, :epsf5, :epsf6, :epsf7,:epsf8 ,:epsf9, :epsf10,:epsf11,:epsf12, :epsf13, :epsf14, :epsf15, :epsf16 ]
fgstateidx = sort(indexin(fgstatelist, m.timings.var))

state[fgstateidx,1] = zeros(size(fgstatelist,1),1)

for t in 2:periods
    #aug_state = [state[m.timings.past_not_future_and_mixed_idx,t-1]
    #            1 
    #           œµ[:,t]]
    #state[:,t] .=  ùêí‚ÇÅ * aug_state         #+ solution[3] * ‚Ñí.kron(aug_state_unc, aug_state_unc) / 2 
    # Get unconditional FC
    PLM= get_irf(m,shocks = [œµ[:,1:t] zeros(size(shockstrue,1), size(shockstrue,2)-t)], periods = 0, initial_state = state[:,1]+solution[1],levels = true)
    #MacroModelling.plot_irf(m,shocks = [œµ[:,1:t]  zeros(size(shockstrue,1), size(shockstrue,2)-t)], periods = 0, initial_state = state[:,1]+solution[1],variables = zlbvar)
    hit = vec(collect(PLM(zlbvar,2:size(fgshlist, 1)+1,:Shock_matrix))).<zlblevel
    spellt = findall(!iszero,hit)
    zlb_œµ = ‚Ñ±.value.(zeros(m.timings.nExo,1))
    shocks = Matrix{Union{Nothing,Float64}}(nothing,m.timings.nExo,10)
    #shocks[end-3:end,:] .= 0
    #shocks[:,2:end] .= 0
    conditions = Matrix{Union{Nothing,Float64}}(undef,m.timings.nVars,m.timings.nExo)
    conditions[zlbindex, spellt] = collect(‚Ñ±.value.(-PLM(zlbvar,findall(!iszero,hit).+1,:Shock_matrix).+zlblevel) )
    
    target = conditions[zlbindex,:]
    # timingtarget = findall(vec(target .!= nothing))
    A = @views solution[2][:,1:m.timings.nPast_not_future_and_mixed] * ‚Ñí.diagm(ones(m.timings.nVars))[m.timings.past_not_future_and_mixed_idx,:]
    # A = [:,1:m.timings.nPast_not_future_and_mixed]
    Comp = @views m.solution.perturbation.first_order.solution_matrix[:,m.timings.nPast_not_future_and_mixed+1:end]
    for t =1:size(conditions,2)-1
        Comp = [Comp; A*Comp[end-m.timings.nVars+1:end,:] ]
    end
    # Select conditining variables
    cond_var_idx = findall(vec(conditions) .!= nothing) # .-m.timings.nVars
    ## IPOPT to solve for FG shocks
    model = Model(Ipopt.Optimizer)
    set_attribute(model, "max_cpu_time", 60.0)
    set_attribute(model, "print_level", 0)
    @variable(model, x[1:length(fgshlist)] .>= 0)  
    @objective(model, Min, sum(abs2,x))
    @constraint(model, Comp[ only(zlbindex) : m.timings.nVars : end, :] * [x ; œµ[indexin(setdiff( m.timings.exo,fgshlist), m.timings.exo),2]] .+ solution[1][only(zlbindex)].>= zlblevel)
    optimize!(model)

    
    œµ[:,t] = [‚Ñ±.value.(JuMP.value.(x)) ; œµ[indexin(setdiff( m.timings.exo,fgshlist), m.timings.exo),t]]
    if t == 1
        state = zeros(typeof(initial_conditions[1]), m.timings.nVars, periods)
        aug_state = [initial_conditions
            1
            œµ[:, t]]
    
        state[:, 1] .= ùêí‚ÇÅ * aug_state #+ solution[3] * ‚Ñí.kron(aug_state, aug_state) / 2 
    else
        aug_state = [state[m.timings.past_not_future_and_mixed_idx, t-1]
            1
            œµ[:, t]]
        state[:, t] .= ùêí‚ÇÅ * aug_state #+ solution[3] * ‚Ñí.kron(aug_state, aug_state) / 2 
    end
end

observables = [:INT, :YGR , :INFL ]

observables_index = sort(indexin(observables,AS07.timings.var))

simulated_data =  state[vec(observables_index),:] .+ solution[1][observables_index]
# plot simulation
StatsPlots.plot(simulated_data', label = ["INFL" "INT" "YGR"])


# Brand Mazelis (2019) 
@model BM19 begin
	

end


@parameters AS07 begin
	RA = 1

	PA = 3.2

	GAMQ =  0 #0.55

	TAU = 2

	NU = 0.1

	KAPPA   = 0.33

	PHI = TAU*(1-NU)/NU/KAPPA/exp(PA/400)^2

	PSIP = 1.5

	PSIY = 0.125

	RHOR = 0.75

	RHOG = 0.95

	RHOZ = 0.9

	SIGR = 0.2

	SIGG = 0.6

	SIGZ = 0.3

	C_o_Y = 0.85

	OMEGA = 0

	XI = 1

    SIGFG = 0.1

end


